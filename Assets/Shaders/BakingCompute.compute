#pragma kernel CSMain
#pragma kernel OcclusionCompute

#define PaletteColorsCount 24 // Note this value also needs to be the size of the ColorHistory Array

float _HeatBurst;
float _HeatDecay;

struct ParticleData
{
	float2 SourcePosition;
	float Heat;
	uint Color;
	float ColorHistory[24];
};

Buffer<uint> _SourceDataBuffer;
RWStructuredBuffer<ParticleData> _DataBuffer;
RWTexture2D<float4> OutputTexture;
RWTexture2D<float4> OcclusionInputTexture;

float _FrameIndex;

[numthreads(128, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	ParticleData data = _DataBuffer[id.x];
    uint colorKey = _SourceDataBuffer[id.x];

	bool colorChange = data.Color != colorKey;
	float heat = data.Heat;
	if (colorChange)
	{
		heat = lerp(1, heat, _HeatBurst);
	}
	else
	{
		heat = lerp(0, heat, _HeatDecay);
	}

	float colorHistory = data.ColorHistory[colorKey] / _FrameIndex;

	_DataBuffer[id.x].Heat = heat;
	_DataBuffer[id.x].Color = colorKey;
	_DataBuffer[id.x].ColorHistory[colorKey] += 1;
    OutputTexture[data.SourcePosition] = float4((float)colorKey / (PaletteColorsCount - 1), heat, colorHistory, 1);
} 

#define SearchRadius 16

[numthreads(128, 1, 1)]
void OcclusionCompute(uint3 id : SV_DispatchThreadID)
{
	//Render height occlusion to alpha

	ParticleData data = _DataBuffer[id.x];
	float4 sourceData = OcclusionInputTexture[data.SourcePosition];
	float currentHeight = sourceData.y;
	float shadowing = 0;
	for (int i = 0; i < SearchRadius; i++)
	{
		for (int j = 0; j < SearchRadius; j++)
		{
			float2 uvs = float2(i - SearchRadius / 2, j - SearchRadius / 2);
			float neighborHeight = OcclusionInputTexture[uvs + data.SourcePosition].y;
			float weight = pow((1 - (length(uvs) / 11)), 5) / 6;
			float shadowPower = pow(saturate((neighborHeight - currentHeight) * 5), .5);
			float shadowAdd = weight * shadowPower;
			shadowing += shadowAdd;
		}
	}

	//Isolate loner longevity pixels
	
	float northLongevity = OcclusionInputTexture[data.SourcePosition + float2(0, 1)].z;
	float southLongevity = OcclusionInputTexture[data.SourcePosition + float2(0, -1)].z;
	float eastLongevity = OcclusionInputTexture[data.SourcePosition + float2(1, 0)].z;
	float westLongevity = OcclusionInputTexture[data.SourcePosition + float2(-1, 0)].z;
	float maxLongevity = (northLongevity + southLongevity + eastLongevity + westLongevity) / 4;
	maxLongevity = pow(maxLongevity, 5) * 5;
	
	sourceData.z = max(sourceData.z, maxLongevity);
	sourceData.a = shadowing;

	OutputTexture[data.SourcePosition] = sourceData;

}
